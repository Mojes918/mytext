enum MessageStatus {
  SENT
  DELIVERED
  READ
}
enum PostType {
  TEXT
  IMAGE
  VIDEO
}

enum ChatRoomType {
  PRIVATE
  RANDOM
}

enum RandomChatStatus {
  WAITING
  MATCHED
  SKIPPED
}

type RandomChatQueue @model @auth(rules: [{ allow: private }]) {
  id: ID!
  userID: ID! @index(name: "byUser")
  status: RandomChatStatus!
  tempName: String  # Temporary name, if the user sets one
  tempImageUri: String  # Temporary image, if the user uploads one
  chatRoomId: ID @index(name: "byChatRoom") 
}

type Message @model @auth(rules: [{ allow: private }]) {
  id: ID!
  content: String
  image: String
  audio: String
  userID: ID! @index(name: "byUser")
  chatroomID: ID! @index(name: "byChatRoom")
  status: MessageStatus
  replyToMessageId: ID
  scheduledTime: AWSTimestamp
  isScheduled: Boolean
  deleted: Boolean
}

type RandomMessage @model @auth(rules: [{ allow: private }]) {
  id: ID!
  content: String
  userID: ID! @index(name: "byUser")
  randomChatRoomID: ID! @index(name: "byRandomChatRoom")
  status: MessageStatus
  replyToMessageId: ID
}


type ChatRoom @model @auth(rules: [{ allow: private }]) {
  id: ID!
  LastMessage: Message @hasOne
  type: ChatRoomType  # PRIVATE or RANDOM
  Messages: [Message] @hasMany(indexName: "byChatRoom", fields: ["id"])
  RandomMessages: [RandomMessage] @hasMany(indexName: "byRandomChatRoom", fields: ["id"])
  ChatRoomUsers: [User] @manyToMany(relationName: "ChatRoomUser")
  RandomChatRoomUsers: [User] @manyToMany(relationName: "RandomChatRoomUser")  # For RANDOM chats only
  UnreadMessages: [UnreadMessages] @hasMany
}

type UnreadMessages @model @auth(rules: [{ allow: private }]) {
  id: ID!
  chatRoomId: ID! @index(name: "byChatRoom")
  userId: ID! @index(name: "byUser")
  newMessages: Int
  chatRoom: ChatRoom @belongsTo(fields: ["chatRoomId"])
  user: User @belongsTo(fields: ["userId"])
}

type User @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
  imageUri: String
  backgroundImageUri: String
  status: String
  pushToken: String  # âœ… Added FCM push token field
  Messages: [Message] @hasMany(indexName: "byUser", fields: ["id"])
  RandomMessages: [RandomMessage] @hasMany(indexName: "byUser", fields: ["id"])
  randomChatrooms: [ChatRoom] @manyToMany(relationName: "RandomChatRoomUser")  # For RANDOM chats
  chatrooms: [ChatRoom] @manyToMany(relationName: "ChatRoomUser")
  lastOnlineAt: AWSTimestamp
  phonenumber: String
  email: String
  posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])
  followers: [Follow] @hasMany(indexName: "byFollowing", fields: ["id"])
  following: [Follow] @hasMany(indexName: "byFollower", fields: ["id"])
  UnreadMessages: [UnreadMessages] @hasMany
}

type Post @model @auth(rules: [{ allow: private }]) {
  id: ID!
  userID: ID! @index(name: "byUser")
  user: User @hasOne(fields: ["userID"])
  content: String
  discription: String
  media: String
  type: PostType
  likes: [Like] @hasMany(indexName: "byPost", fields: ["id"])
  loves: [Love] @hasMany(indexName: "byPost", fields: ["id"])
  comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
  shares: Int
}

type Like @model @auth(rules: [{ allow: private }]) {
  id: ID!
  postID: ID! @index(name: "byPost")
  userID: ID! @index(name: "byUser")
}

type Love @model @auth(rules: [{ allow: private }]) {
  id: ID!
  postID: ID! @index(name: "byPost")
  userID: ID! @index(name: "byUser")
}

type Comment @model @auth(rules: [{ allow: private }]) {
  id: ID!
  postID: ID! @index(name: "byPost")
  userID: ID! @index(name: "byUser")
  content: String
  user: User @hasOne(fields: ["userID"])
}

type Follow @model @auth(rules: [{ allow: private }]) {
  id: ID!
  followerID: ID! @index(name: "byFollower")
  followingID: ID! @index(name: "byFollowing")
}
